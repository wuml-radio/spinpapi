{
  "_args": [
    [
      {
        "raw": "memory-cache@>= 0.1.6",
        "scope": null,
        "escapedName": "memory-cache",
        "name": "memory-cache",
        "rawSpec": ">= 0.1.6",
        "spec": ">=0.1.6",
        "type": "range"
      },
      "/home/jhassler/SourceCode/spinpapi"
    ]
  ],
  "_from": "memory-cache@>=0.1.6",
  "_id": "memory-cache@0.1.6",
  "_inCache": true,
  "_location": "/memory-cache",
  "_nodeVersion": "6.2.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/memory-cache-0.1.6.tgz_1465375626623_0.52936717774719"
  },
  "_npmUser": {
    "name": "ptarjan",
    "email": "npm@paulisageek.com"
  },
  "_npmVersion": "3.8.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "memory-cache@>= 0.1.6",
    "scope": null,
    "escapedName": "memory-cache",
    "name": "memory-cache",
    "rawSpec": ">= 0.1.6",
    "spec": ">=0.1.6",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/memory-cache/-/memory-cache-0.1.6.tgz",
  "_shasum": "2ed9933ed7a8c718249be7366f7ca8749acf8a24",
  "_shrinkwrap": null,
  "_spec": "memory-cache@>= 0.1.6",
  "_where": "/home/jhassler/SourceCode/spinpapi",
  "author": {
    "name": "Paul Tarjan",
    "email": "npm@paulisageek.com"
  },
  "bugs": {
    "url": "https://github.com/ptarjan/node-cache/issues"
  },
  "contributors": [
    {
      "name": "Ramon Snir",
      "email": "ramon@dynamicyield.com"
    },
    {
      "name": "Jacob Wenger",
      "email": "wenger.jacob@gmail.com"
    }
  ],
  "dependencies": {},
  "description": "A simple in-memory cache. put(), get() and del()",
  "devDependencies": {
    "chai": "^2.2.0",
    "gulp": "^3.8.11",
    "gulp-exit": "0.0.2",
    "gulp-istanbul": "^0.7.0",
    "gulp-jshint": "^1.10.0",
    "gulp-mocha": "^2.0.1",
    "jshint-stylish": "^1.0.1",
    "sinon": "^1.14.1",
    "sinon-chai": "^2.7.0"
  },
  "directories": {},
  "dist": {
    "shasum": "2ed9933ed7a8c718249be7366f7ca8749acf8a24",
    "tarball": "https://registry.npmjs.org/memory-cache/-/memory-cache-0.1.6.tgz"
  },
  "gitHead": "cb26698fd2561c2ffadfc210c0a3dae08862bc8a",
  "homepage": "https://github.com/ptarjan/node-cache#readme",
  "keywords": [
    "cache",
    "ram",
    "simple",
    "storage"
  ],
  "license": "BSD-2-Clause",
  "main": "./index.js",
  "maintainers": [
    {
      "name": "ptarjan",
      "email": "npm@paulisageek.com"
    }
  ],
  "name": "memory-cache",
  "optionalDependencies": {},
  "readme": "# memory-cache [![Build Status](https://travis-ci.org/ptarjan/node-cache.svg?branch=master)](https://travis-ci.org/ptarjan/node-cache)\n\nA simple in-memory cache for node.js\n\n## Installation\n\n    npm install memory-cache\n\n## Usage\n\n```javascript\nvar cache = require('memory-cache');\n\n// now just use the cache\n\ncache.put('foo', 'bar');\nconsole.log(cache.get('foo'));\n\n// that wasn't too interesting, here's the good part\n\ncache.put('houdini', 'disappear', 100, function(key, value) {\n    console.log(key + ' did ' + value);\n}); // Time in ms\n\nconsole.log('Houdini will now ' + cache.get('houdini'));\n\nsetTimeout(function() {\n    console.log('Houdini is ' + cache.get('houdini'));\n}, 200);\n```\n\nwhich should print\n\n    bar\n    Houdini will now disappear\n    Houdini did disappear\n    Houdini is null\n\n## API\n\n### put = function(key, value, time, timeoutCallback)\n\n* Simply stores a value\n* If time isn't passed in, it is stored forever\n* Will actually remove the value in the specified time in ms (via `setTimeout`)\n* timeoutCallback is optional function fired after entry has expired with key and value passed (`function(key, value) {}`)\n* Returns the cached value\n\n### get = function(key)\n\n* Retrieves a value for a given key\n* If value isn't cached, returns `null`\n\n### del = function(key)\n\n* Deletes a key, returns a boolean specifying whether or not the key was deleted\n\n### clear = function()\n\n* Deletes all keys\n\n### size = function()\n\n* Returns the current number of entries in the cache\n\n### memsize = function()\n\n* Returns the number of entries taking up space in the cache\n* Will usually `== size()` unless a `setTimeout` removal went wrong\n\n### debug = function(bool)\n\n* Turns on or off debugging\n\n### hits = function()\n\n* Returns the number of cache hits (only monitored in debug mode)\n\n### misses = function()\n\n* Returns the number of cache misses (only monitored in debug mode)\n\n### keys = function()\n\n* Returns all the cache keys\n\n\n## Note on Patches/Pull Requests\n\n* Fork the project.\n* Make your feature addition or bug fix.\n* Send me a pull request.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/ptarjan/node-cache.git"
  },
  "scripts": {
    "test": "gulp test"
  },
  "version": "0.1.6"
}
